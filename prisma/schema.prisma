generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  email      String      @unique
  password   String
  state      User_State  @default(unavailable)
  role       User_Role   @default(other)
  created_at DateTime    @default(now())
  Warehouses Warehouse[]
}

model Supplier {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  email       String       @unique
  phone       String?
  description String?
  Facility    Facility[]
  Ingredient  Ingredient[]
}

model Ingredient {
  id                          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                        String
  unit                        Ingredient_Unit               @default(the)
  supplierId                  String?                       @db.Uuid
  cost                        Decimal
  stock                       Decimal
  warehouseId                 String?                       @db.Uuid
  state                       Ingredient_State              @default(available)
  foodIngredient              FoodIngredient[]
  supplier                    Supplier?                     @relation(fields: [supplierId], references: [id])
  warehouse                   Warehouse?                    @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  Inventory_Adjustment_Detail Inventory_Adjustment_Detail[]
}

model FoodItem {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  price          Decimal
  sale_price     Decimal
  image          String?
  description    String?
  create_at      DateTime         @default(now())
  state          Food_State       @default(available)
  category       Food_Cat         @default(other)
  foodIngredient FoodIngredient[]
  Receipt_Detail Receipt_Detail[]
}

model FoodIngredient {
  foodId       String     @db.Uuid
  ingredientId String     @db.Uuid
  amount       Decimal
  food         FoodItem   @relation(fields: [foodId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@id([foodId, ingredientId])
}

model Facility {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  cost         Decimal         @default(0)
  amount       Decimal
  issue_amount Decimal         @default(0)
  state        Facility_State  @default(available)
  supplierId   String?         @db.Uuid
  image        String?
  unit         Ingredient_Unit @default(the)
  warehouseId  String?         @db.Uuid
  supplier     Supplier?       @relation(fields: [supplierId], references: [id])
  warehouse    Warehouse?      @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
}

model Warehouse {
  id                  String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  state               Warehouse_State
  address             String
  ownerId             String?                @db.Uuid
  facilities          Facility[]
  ingredients         Ingredient[]
  inventoryAdjustment Inventory_Adjustment[]
  owner               User?                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Inventory_Adjustment {
  id            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state         Inventory_Adjustment_State    @default(draft)
  created_at    DateTime                      @default(now())
  delivered_at  DateTime?
  from          String
  note          String?
  received_at   DateTime?
  to            String
  type          Inventory_Adjustment_Type
  warehouseId   String                        @db.Uuid
  warehouse     Warehouse                     @relation(fields: [warehouseId], references: [id])
  inboundDetail Inventory_Adjustment_Detail[]
}

model Inventory_Adjustment_Detail {
  id                    String               @db.Uuid
  ingredientId          String               @db.Uuid
  diff                  Decimal
  inventoryAdjustmentId Inventory_Adjustment @relation(fields: [id], references: [id])
  ingredients           Ingredient           @relation(fields: [ingredientId], references: [id])

  @@id([id, ingredientId])
}

model Receipt {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  state          Receipt_State    @default(pending)
  create_at      DateTime         @default(now())
  paymentMethod PaymentMethod @default(cash)
  Receipt_Detail Receipt_Detail[]
}

model Receipt_Detail {
  id      String   @db.Uuid
  foodId  String   @db.Uuid
  amount  Decimal
  food    FoodItem @relation(fields: [foodId], references: [id])
  receipt Receipt  @relation(fields: [id], references: [id])

  @@id([id, foodId])
}

enum User_State {
  available
  unavailable
  blocked
}

enum User_Role {
  admin
  wh
  sale
  hr
  other
}

enum Ingredient_Unit {
  g
  kg
  l
  ml
  the
}

enum Food_State {
  onsale
  available
  unavailable
}

enum Food_Cat {
  new
  combo4one
  combo4group
  chicken
  carb
  snack
  drink
  desert
  other
  dessert_drink
}

enum Facility_State {
  available
  unavailable
  issues
}

enum Inventory_Adjustment_State {
  draft
  confirm
  validated
  transfer
  done
  cancel
  return
}

enum Warehouse_State {
  active
  inactive
}

enum Inventory_Adjustment_Type {
  inbound
  outbound
  transfer
  update
  scrap
}

enum Ingredient_State {
  available
  ofs
  unavailable
}

enum Receipt_State {
  pending
  cancel
  paid
  done
}

enum PaymentMethod{
  cash
  card
  qr
}